/* Generated by Together */

#ifndef PLAYER_H
#define PLAYER_H
#include <xstring>
#include "PreAlloc.h"
#include "RunBiDirectChain.h"
#include "TeamMember.h"
#include "GuildMember.h"
#include "GateServer.h"
#include "Friend.h"
#include "Master.h"
#include "SessionChat.h"
class Team;

_DBC_USING

class Player : public PreAllocStru, public RunBiDirectItem<Player>, public TeamMember, public GuildMember, public Friend, public Master {
public:
	enum { emMaxCharacters = 10,
		   emMaxSessChat = 30,
		   emMaxSessPlayer = 100 };
	Player(uLong size);
	void Free() { PreAllocStru::Free(); }
	bool BeginRun();
	bool EndRun();
	void EndPlay(DataSocket* datasock);
	void EndPlayReset();

	void DoCommand(cChar* cmd);
	void CountEstopTime();
	void EstopPlayer(cChar* plyname, uLong lTimes);
	void DelEstopPlayer(cChar* plyname);
	void DisablePlayer(cChar* plyname, uLong lTimes);
	void SendSysInfo(cChar* info);
	char FindIndexByChaName(cChar* chaname);
	Chat_Session* FindSessByID(uLong sessid);
	bool IsEstop();
	void CheckEstop();
	struct
	{
		uLong m_acctLoginID; // 帐号服务器帐号DB id
		uLong m_acctid;
		uLong m_sessid;
		std::string m_acctname; //帐户名
		std::string m_passport; //
		std::string m_password; //二次密码
		char m_gm;
		char m_clientip[16];   //客户端IP地址
		char m_lastip[16];	   //上次登录IP
		char m_lastreason[50]; //上次断开Reason
		char m_lastleavetime[21];
		Player* m_pingply;
	};
	struct
	{
		Mutex m_mtxCha;
		char m_chanum;							//角色数
		char m_bp_currcha;						//BeginPlay时候确定的currcha
		char m_currcha;							//当前角色下标
		long m_chaid[emMaxCharacters];			//角色ID列表
		std::string m_chaname[emMaxCharacters]; //角色名列表
		std::string m_motto[emMaxCharacters];	//角色座右铭
		short m_icon[emMaxCharacters];			//角色小图标
		uLong m_guild[emMaxCharacters];			//公会ID
		bool m_estop[emMaxCharacters];			//是否被禁言
		unsigned long m_guildPermission[emMaxCharacters];
		unsigned int m_chatColour[emMaxCharacters];
		bool volatile m_bWG; //是否使用了外挂
	};
	struct
	{
		InterLockedLong m_chatnum; //当前的Session聊天窗口数
		bool volatile m_refuse_tome;
		bool volatile m_refuse_sess;
		Mutex m_mtxChat;
		uLong volatile m_chatarranum;
		Chat_Player* volatile m_chat[emMaxSessChat];
	};
	struct
	{
		InterLockedLong m_worldtick;
		InterLockedLong m_worldticktemp;
		InterLockedLong m_tradetick;
		InterLockedLong m_tradeticktemp;
		InterLockedLong m_toyoutick;
	};
	/**
	 * @supplierCardinality 1..* 
	 */
	GateServer* m_gate;
	uLong m_gtAddr; //GateServer上分配的ID,实际上是内部数据结构的内存地址.
	bool m_bCheat;
	long m_lChatMoney;
	long m_lTradeChatMoney;
	bool m_bNew;

private:
	~Player();
	void Initially();
	void Finally();
	virtual void TeamInvitedCheck(Invited* invited);
	virtual void FrndInvitedCheck(Invited* invited);
	virtual void MasterInvitedCheck(Invited* invited);
};

#endif //PLAYER_H
