print('Loading npcexploit.lua')

enumPinForBank = 1

function HandlePinRequest(role, action)
	if (action == enumPinForBank) then
		OpenBank(role, role)
	end
	return 1;
end

--fix sail exploit
SailNpc = {
	["Builder - Sinbad"] = true, -- Argent City Ship Builder
	["Drown wanderer"] = true,
	["Harbor Operator - Baros"] = true,
	["Harbor Operator - Buni" ] = true,
	["Harbor Operator - Catchy"] = true,
	["Harbor Operator - Dannis"] = true,
	["Harbor Operator - Daruka"] = true,
	["Harbor Operator - Didane"] = true,
	["Harbor Operator - Domoru"] = true,
	["Harbor Operator - Fardell"] = true,
	["Harbor Operator - Gregory"] = true,
	["Harbor Operator - Hux"] = true,
	["Harbor Operator - Lt. Wayne"] = true,
	["Harbor Operator - Lufan"] = true,
	["Harbor Operator - Luigi"] = true,
	["Harbor Operator - Mark"] = true,
	["Harbor Operator - Noel"] = true,
	["Harbor Operator - Odie"] = true,
	["Harbor Operator - Paul"] = true,
	["Harbor Operator - Penny"] = true,
	["Harbor Operator - Qing"] = true,
	["Harbor Operator - Ramus"] = true,
	["Harbor Operator - Roy"] = true,
	["Harbor Operator - Shirley"] = true,
	["Harbor Operator - Shuang"] = true,
	["Harbor Operator - Silion"] = true,
	["Harbor Operator - Soc"] = true,
	["Harbor Operator - Teba"] = true,
	["Harbor Operator - Tomas"] = true,
	["Harbor Operator - Whitcombe"] = true,
	["Harbor Operator - Whitney"] = true,
	["Harbor Operator - Xad"] = true,
	["Harbor Operator - Yun"] = true,
	["Harbour Operator - Luna"] = true,
	["Harbour Operator - Luna"] = true,
	["Harbour Operator - Raymond"] = true,
	["Harbour Operator - Starlet"] = true,
	["Mysterious Sailor"] = true,
	["Obscure Harbor Operator"] = true,
	["Seaport Commander"] = true,
	["Seaport Commander"] = true,
	["Seaport Commander"] = true,
	["Seaport Commander"] = true,
}

function IsSailNpc(role,npc)
	local name = GetChaDefaultName(npc)
	if IsChaLiving(role) ~= 1 then
		return 0
	elseif IsPlayer(npc) == 1 then
		return 0
	else
		if SailNpc[name] then
			return 1
		else
			return 0
		end
	
	end
end

IsSailBoatNpc = IsSailNpc

ItemIdFlag = {}
local fp = assert(io.open(GetResPath('ItemInfo.txt')))
for line in fp:lines() do
	local position = string.find(line, "[ \t]*//")
	if position ~= 1 then
		local data = split(line, "\t")
		local id,cash,max = tonumber(data[1]),tonumber(data[23]),tonumber(data[21])
		if id ~= nil then
			ItemIdFlag[id] = {price = cash, stack = max}
		end
	end
end

AntiBuy = {}
function Buy(character, npc, trade, itemtype, index1, index2, count)
	--------------- CUSTOM ---------------
	local delay = 1
	if AntiBuy[character] == nil then
		AntiBuy[character] = os.time()
	end
	local cd = AntiBuy[character] - os.time()
	if cd > 0 then
		SystemNotice(character, GetChaDefaultName(npc)..": Loading transaction... please wait "..cd.." sec(s)!")
		return LUA_FALSE
	end
	if cd > delay then
		AntiBuy[character] = nil
	end
	--------------- END ---------------
	itemtype = itemtype + 1
	index1 = index1 + 1
	if trade[itemtype] == nil or trade[itemtype].item == nil or trade[itemtype].item[index1] == nil then
		SystemNotice(character, "Buy:function parameter error!")
		return LUA_FALSE
	end
	local itemid = trade[itemtype].item[index1];
	-- check if value exceeds 2b
	local totalCost = ItemIdFlag[itemid].price * count;
	if totalCost > 2000000000 then
		BickerNotice(character, 'Total cost cannot exceed 2b...');
		return LUA_FALSE;
	end
	-- check if player has enough money
	local plyGold = GetChaAttr(TurnToCha(character), ATTR_GD)
	if plyGold < totalCost then
		BickerNotice(character, 'You do not have that much money...');
		return LUA_FALSE;
	end
	-- GEM STACK PREVENTION:
	if count > ItemIdFlag[itemid].stack then
		BickerNotice(character, GetItemName(itemid)..' comes in stacks of '..ItemIdFlag[itemid].stack..' only!');
		return LUA_FALSE;
	end
	AntiBuy[character] = os.time() + delay
	SafeBuy(character, itemid, index2, count)
	return LUA_TRUE
end

playerActiveNpcs = playerActiveNpcs or {}

JumpPageHook = JumpPageHook or JumpPage
BuyPageHook = BuyPageHook or BuyPage
SendExchangeXDataHook = SendExchangeXDataHook or SendExchangeXData
SendExchangeDataHook = SendExchangeDataHook or SendExchangeData
BoatBerthListHook = BoatBerthListHook or BoatBerthList
TradeGoodsHook = TradeGoodsHook or TradeGoods

PAGE_BLACK_MARKET = 1
PAGE_NPC_TRADEITEM = 2
PAGE_BOAT_TRADE = 3
PAGE_BOAT_TRADEITEM = 4

JumpPage = function( character, npc, page, param )
	playerActiveNpcs[character] = {Npc = npc, Page = param}
	return JumpPageHook(character, npc, page, param)
end

BuyPage = function( character, npc, trade )
	playerActiveNpcs[character] = {Npc = npc, Page = PAGE_NPC_TRADEITEM}
	return BuyPageHook( character, npc, trade )
end

SendExchangeXData = function( character, npc, exchangeData )
	playerActiveNpcs[character] = {Npc = npc, Page = PAGE_BLACK_MARKET}
	return SendExchangeXDataHook( character, npc, exchangeData )
end

SendExchangeData = function( character, npc, exchangeData )
	playerActiveNpcs[character] = {Npc = npc, Page = PAGE_BLACK_MARKET}
	return SendExchangeDataHook( character, npc, exchangeData )
end

BoatBerthList = function (character, npcid, BERTH_TRADE_LIST, berth, x, y, z)
	playerActiveNpcs[character] = {Npc = npcid, Page = PAGE_BOAT_TRADE}
	return BoatBerthListHook(character, npcid, BERTH_TRADE_LIST, berth, x, y, z)
end

TradeGoods = function ( character, npc, trade, index )
	playerActiveNpcs[character] = {Npc = npc, Page = PAGE_BOAT_TRADEITEM}
	return TradeGoodsHook(character, npc, trade, index)
end



function MsgProc( character, npc, rpk, page, trade, missionlist, exchangeData )
	if character == nil or npc == nil or rpk == nil then
		PRINT( "MsgProc:Function parameter error!" )
		EXLG( "NpcSdk_error", "MsgProc:Function parameter error!" )
		return
	end
	
	PRINT( "MsgProc:Net message process." )
	local usCmd = ReadWord( rpk );
		
	if usCmd == CMD_CM_TALKPAGE then	--对话页命令信息处理
		local byTalkID = ReadByte( rpk ) --读取页指令索引信息

		if byTalkID == ROLE_FIRSTPAGE then	--和npc第一次交流对话
			RefreshMissionState( character, npc )
			if page.start == MultiTrigger then
				PRINT( "MsgProc:MultiTrigger, page, p1, p2", page, page.p1, page.p2 )
				return MultiTrigger( character, npc, page, page.p1, page.p2 )
			end
			if page.start == PopupWindow then
				PRINT( "MsgProc:PopupWindow, page, p1, p2", page, page.p1, page.p2 )
				return PopupWindow( character, npc, page, page.p1, page.p2 )
			end
			return JumpPage( character, npc, page, 1 ) --发送第一页对话信息
		elseif byTalkID == ROLE_CLOSEPAGE then
			return SendClosePage( character, npc ) --关闭对话
		elseif page[byTalkID] == nil or page[byTalkID][1] == nil then --错误的页数据，报警
			return SystemNotice( character, "MsgProc: request a dialogue with npc but target npc does not have page data notice!" )
		else
			local talkpage = page[byTalkID][1]
			local funcpage = page[byTalkID][2]

			--执行页链接功能指令
			if talkpage.func == JumpPage then
				return JumpPage( character, npc, page, talkpage.p1 )
			elseif talkpage.func == FuncPage then
				return FuncPage( character, npc, page, talkpage.p1 )
			elseif talkpage.func == CloseTalk then
				return CloseTalk( character, npc )
			elseif talkpage.func == HasRecord then
			local ret = HasRecord( character, talkpage.p1 )
				if ret == LUA_TRUE then
					return JumpPage( character, npc, page, talkpage.p2 )
				else
					return JumpPage( character, npc, page, talkpage.p3 )
				end
			elseif funcpage ~= nil then	--判断是否有功能信息
				return FuncPage( character, npc, page, byTalkID )
			else --跳转到下一页
				local PageID = byTalkID + 1

				if page[PageID] == nil then
					return SystemNotice( character, "MsgProc: page notice link error, does not have next page or unknown link function!" )
				end
				return JumpPage( character, npc, page, PageID )
			end
		end
		return
	elseif usCmd == CMD_CM_FUNCITEM then 
		local byPage = ReadByte( rpk );	
		local byItem = ReadByte( rpk ); 
		PRINT( "MsgProc: pageid = , itemid = ", byPage, byItem )
		if page[byPage] == nil or page[byPage][1] == nil then
			return SystemNotice( character, "MsgProc:unknown function page index notice error or target page does not exist!" )
		end

		if page[byPage][1].talk ~= nil then
			if page[byPage][1].func ~= nil then
				PRINT( "MultiTrigger" )
				byItem = 1
			else
				byItem = byItem + 2
			end
		elseif page[byPage][1].text ~= nil then
			byItem = byItem + 1
		end

		local item = page[byPage][byItem]
		if item == nil or item.func == nil then
			return SystemNotice( character, "MsgProc: Target page does not have function page notice nor function notice!" )
		end
		
		if not playerActiveNpcs[character] or playerActiveNpcs[character].Npc ~=npc or playerActiveNpcs[character].Page~= byPage then
			playerActiveNpcs[character] = nil
			return
		end

		if item.func == JumpPage then
			return JumpPage( character, npc, page, item.p1 )
		elseif item.func == FuncPage then
			return FuncPage( character, npc, page, item.p1 )
		elseif item.func == CloseTalk then
			return CloseTalk( character, npc )
		elseif item.func == GoTo then
			return GoTo( character, item.p1, item.p2, item.p3 )
		elseif item.func == RandToMap then
			return RandToMap( character, npc, item.p1, item.p2 )
		elseif item.func == RandFunction then
			return RandFunction( character, npc, page, item.p1, item.p2 )
		elseif item.func == MultiFunc then
			return MultiFunc( character, npc, page, item.p1, item.p2 )
		elseif item.func == SalePage then
			return SalePage( character, npc, trade )
		elseif item.func == BuyPage then
			return BuyPage( character, npc, trade )
		elseif item.func == ListAuction then
			return ListAuction( character, npc )
		elseif item.func == ChangeItem then
			return ChangeItem(character,npc)
		elseif item.func == TradeGoods then
			return TradeGoods( character, npc, trade, item.p1 )
		elseif item.func == MultiTrigger then
			return MultiTrigger( character, npc, page, item.p1, item.p2 )
		elseif item.func == MultiTrigger_0 then
			return MultiTrigger_0( character, npc, page, item.p1, item.p2 )
		elseif item.func == MultiTrigger_1 then
			return MultiTrigger_1( character, npc, page, item.p1, item.p2 )
		elseif item.func == MultiTrigger_2 then
			return MultiTrigger_2( character, npc, page, item.p1, item.p2 )
		elseif item.func == MultiTrigger_3 then
			return MultiTrigger_3( character, npc, page, item.p1, item.p2 )
		elseif item.func == OpenForge then
			return OpenForge( character, npc )
		elseif item.func == OpenUnite then
			return OpenUnite( character, npc )
		elseif item.func == OpenMilling then
			return OpenMilling( character, npc )
		elseif item.func == OpenHair then
			return OpenHair( character, npc )
		elseif item.func == OpenRepair then
			return OpenRepair( character, npc )
		elseif item.func == OpenFusion then
			return OpenFusion( character, npc )
		elseif item.func == OpenUpgrade then
			return OpenUpgrade( character, npc )
		elseif item.func == OpenEidolonMetempsychosis then
			return OpenEidolonMetempsychosis( character, npc )
		elseif item.func == OpenItemTiChun then
			return OpenItemTiChun( character, npc )
		elseif item.func == OpenItemEnergy then
			return OpenItemEnergy( character, npc )
		elseif item.func == OpenGMSend then
			return OpenGMSend( character, npc )
		elseif item.func == OpenGMRecv then
			return OpenGMRecv( character, npc )
		elseif item.func == OpenItemFix then
			return OpenItemFix( character, npc )
		elseif item.func == OpenGetStone then
			return OpenGetStone( character, npc )
		elseif item.func == OpenTiger then
			return OpenTiger( character, npc )
		elseif item.func == GoTosdBoss then
			return GoTosdBoss(character,item.p1)
		elseif item.func == SetSpawnPos then
			return SetSpawnPos( character, item.p1 )
		elseif item.func == TransferDiamond then
			return TransferDiamond( character, item.p1 )
		elseif item.func == ListChallenge then
			return ListChallenge( character, npc )
		--elseif item.func == ListAuction then
			--return ListAuction( character, npc )
		elseif item.func == SendExchangeData then
			return SendExchangeData( character, npc )
		elseif item.func == SendExchangeXData then
			return SendExchangeXData( character, npc, exchangeData )
		elseif item.func == Garner2GetWiner then 
			return Garner2GetWiner(character,npc)
		elseif item.func == Change_FightingBook then
			return Change_FightingBook (character,npc)
		elseif item.func == Garner2RequestReorder then
			return Garner2RequestReorder (character,npc)
		elseif item.func == Transfer_TeamStar then
			return Transfer_TeamStar( character, item.p1 )
		elseif item.func == LifeSkillBegin then
			return LifeSkillBegin(character,npc,item.p1)
		elseif item.func == Change_shanyao then
			return Change_shanyao(character,npc)
		elseif item.func == Change_rongyao then
			return Change_rongyao(character,npc)
		elseif item.func == Change_huihuang then
			return Change_huihuang(character,npc)
		elseif item.func == GetChaName_0 then
			return GetChaName_0(character,npc )
		elseif item.func == GetChaName_1 then
			return GetChaName_1(character,npc )
		elseif item.func == GetChaName_2 then
			return GetChaName_2(character,npc )
		elseif item.func == GetChaName_3 then
			return GetChaName_3(character,npc )
		elseif item.func == GetChaName_4 then
			return GetChaName_4(character,npc )
		elseif item.func == GetChaName_5 then
			return GetChaName_5(character,npc )
		elseif item.func == GetChaName_6 then
			return GetChaName_6(character,npc )
		elseif item.func == GetChaName_7 then
			return GetChaName_7(character,npc )
		elseif item.func == GetChaName_8 then
			return GetChaName_8(character,npc )
		elseif item.func == GetChaName_9 then
			return GetChaName_9(character,npc )
		elseif item.func == GetChaName_10 then
			return GetChaName_10(character,npc )
		elseif item.func == GetChaName_11 then
			return GetChaName_11(character,npc )
		elseif item.func == GetChaName_12 then
			return GetChaName_12(character,npc )
		elseif item.func == GetChaName_13 then
			return GetChaName_13(character,npc )
		elseif item.func == GetChaName_14 then
			return GetChaName_14(character,npc )
		elseif item.func == GetChaName_15 then
			return GetChaName_15(character,npc )
		elseif item.func == GetChaName_16 then
			return GetChaName_16(character,npc )
		elseif item.func == GetChaName_17 then
			return GetChaName_17(character,npc )
		elseif item.func == GetChaName_18 then
			return GetChaName_18(character,npc )
		elseif item.func == GetChaName_19 then
			return GetChaName_19(character,npc )
		elseif item.func == GetChaName_20 then
			return GetChaName_20(character,npc )
		elseif item.func == GetChaName_21 then
			return GetChaName_21(character,npc )
		elseif item.func == GetChaName_22 then
			return GetChaName_22(character,npc )
		elseif item.func == GetChaName_23 then
			return GetChaName_23(character,npc )
		elseif item.func == GetChaName_24 then
			return GetChaName_24(character,npc )
		elseif item.func == GetChaName_25 then
			return GetChaName_25(character,npc )
		elseif item.func == GetChaName_26 then
			return GetChaName_26(character,npc )
		elseif item.func == GetChaName_27 then
			return GetChaName_27(character,npc )
		elseif item.func == GetChaName_28 then
			return GetChaName_28(character,npc )
		elseif item.func == GetChaName1_born then
			return GetChaName1_born(character,npc )
		elseif item.func == GetChaName2_born then
			return GetChaName2_born(character,npc )
		elseif item.func == GetChaName3_born then
			return GetChaName3_born(character,npc )
		elseif item.func == GetChaName4_born then
			return GetChaName4_born(character,npc )
		elseif item.func == GetChaName5_born then
			return GetChaName5_born(character,npc )
		elseif item.func == GetChaName6_born then
			return GetChaName6_born(character,npc )
		elseif item.func == GetChaName1_born2 then
			return GetChaName1_born2(character,npc )
		elseif item.func == GetChaName2_born2 then
			return GetChaName2_born2(character,npc )
		elseif item.func == GetChaName3_born2 then
			return GetChaName3_born2(character,npc )
		elseif item.func == GetChaName4_born2 then
			return GetChaName4_born2(character,npc )
		elseif item.func == GetChaName5_born2 then
			return GetChaName5_born2(character,npc )
		elseif item.func == GetChaName6_born2 then
			return GetChaName6_born2(character,npc )
		elseif item.func == GetChaName1_born3 then
			return GetChaName1_born3(character,npc )
		elseif item.func == GetChaName2_born3 then
			return GetChaName2_born3(character,npc )
		elseif item.func == GetChaName3_born3 then
			return GetChaName3_born3(character,npc )
		elseif item.func == GetChaName4_born3 then
			return GetChaName4_born3(character,npc )
		elseif item.func == GetChaName5_born3 then
			return GetChaName5_born3(character,npc )
		elseif item.func == GetChaName6_born3 then
			return GetChaName6_born3(character,npc )
		elseif item.func == GiveHoe then
			return GiveHoe(character,npc)
		elseif item.func == CheckMetal then
			return CheckMetal(character,npc )
		elseif item.func == PKPointToZero then
			return PKPointToZero(character,npc)
		elseif item.func == PlayEffect then
			return PlayEffect( npc, 361 )
		elseif item.func == GetChaName1_guildwar then
			return GetChaName1_guildwar(character,npc )
		elseif item.func == GetChaName2_guildwar then
			return GetChaName2_guildwar(character,npc )
		elseif item.func == GetChaName3_guildwar then
			return GetChaName3_guildwar(character,npc )
		elseif item.func == GetChaName4_guildwar then
			return GetChaName4_guildwar(character,npc )
		elseif item.func == GetChaName5_guildwar then
			return GetChaName5_guildwar(character)
		elseif item.func == GetChaName6_guildwar then
			return GetChaName6_guildwar(character)
		elseif item.func == GetChaName7_guildwar then
			return GetChaName7_guildwar(character)
		elseif item.func == GetChaName8_guildwar then
			return GetChaName8_guildwar(character)
		elseif item.func == GetChaName9_guildwar then
			return GetChaName9_guildwar(character)
		elseif item.func == GetChaName10_guildwar then
			return GetChaName10_guildwar(character)
		elseif item.func == GetChaName11_guildwar then
			return GetChaName11_guildwar(character)
		elseif item.func == GetChaName12_guildwar then
			return GetChaName12_guildwar(character)
		elseif item.func == GetChaName13_guildwar then
			return GetChaName13_guildwar(character)
		elseif item.func == GetChaName14_guildwar then
			return GetChaName14_guildwar(character)
		elseif item.func == GetChaName15_guildwar then
			return GetChaName15_guildwar(character)
		elseif item.func == GetChaName16_guildwar then
			return GetChaName16_guildwar(character)
		elseif item.func == GetChaName17_guildwar then
			return GetChaName17_guildwar(character)
		elseif item.func == GetChaName18_guildwar then
			return GetChaName18_guildwar(character)
		elseif item.func == GetChaName19_guildwar then
			return GetChaName19_guildwar(character)
		elseif item.func == GetChaName20_guildwar then
			return GetChaName20_guildwar(character)
		elseif item.func == GetChaName21_guildwar then
			return GetChaName21_guildwar(character)
		elseif item.func == GetChaName22_guildwar then
			return GetChaName22_guildwar(character)
		elseif item.func == GetChaName23_guildwar then
			return GetChaName23_guildwar(character)
		elseif item.func == GetChaName24_guildwar then
			return GetChaName24_guildwar(character)
		elseif item.func == GetChaName25_guildwar then
			return GetChaName25_guildwar(character)
		elseif item.func == GetChaName26_guildwar then
			return GetChaName26_guildwar(character)
		elseif item.func == GetChaName27_guildwar then
			return GetChaName27_guildwar(character)
		elseif item.func == GetChaName28_guildwar then
			return GetChaName28_guildwar(character)
		elseif item.func == GetChaName29_guildwar then
			return GetChaName29_guildwar(character)
		elseif item.func == GetChaName30_guildwar then
			return GetChaName30_guildwar(character)
		elseif item.func == GetChaName31_guildwar then
			return GetChaName31_guildwar(character)
		elseif item.func == GetChaName32_guildwar then
			return GetChaName32_guildwar(character)
		elseif item.func == GetChaName33_guildwar then
			return GetChaName33_guildwar(character)
		elseif item.func == GetChaName34_guildwar then
			return GetChaName34_guildwar(character)
		elseif item.func == GetChaName35_guildwar then
			return GetChaName35_guildwar(character)
		elseif item.func == GetChaName36_guildwar then
			return GetChaName36_guildwar(character)
		elseif item.func == GetChaName37_guildwar then
			return GetChaName37_guildwar(character)
		elseif item.func == GetChaName38_guildwar then
			return GetChaName38_guildwar(character)
		elseif item.func == GetChaName39_guildwar then
			return GetChaName39_guildwar(character)
		elseif item.func == GetChaName40_guildwar then
			return GetChaName40_guildwar(character)
		elseif item.func == GetChaName41_guildwar then
			return GetChaName41_guildwar(character)
		elseif item.func == GetChaName42_guildwar then
			return GetChaName42_guildwar(character)
		elseif item.func == GetChaName43_guildwar then
			return GetChaName43_guildwar(character)
		elseif item.func == GetChaName44_guildwar then
			return GetChaName44_guildwar(character)
		elseif item.func == GetChaName45_guildwar then
			return GetChaName45_guildwar(character)
		elseif item.func == ChangeItem then
			return ChangeItem(character,npc)
		elseif item.func == RequestClientPin then
			return RequestClientPin( character, item.p1 )
		else
			return SystemNotice( character, "MsgProc: function option unknown function!" )
		end
	elseif usCmd == CMD_CM_BLACKMARKET_EXCHANGE_REQ then --黑市兑换
		local timeNum = ReadWord( rpk )
		local srcID = ReadWord( rpk )
		local srcNum = ReadWord( rpk )
		local tarID = ReadWord( rpk )
		local tarNum = ReadWord( rpk )
		local byIndex = ReadWord( rpk )
		
		if not playerActiveNpcs[character] or playerActiveNpcs[character].Npc ~= npc or playerActiveNpcs[character].Page ~= PAGE_BLACK_MARKET then
			playerActiveNpcs[character] = nil
			return
		end
		
		local ret = KitbagLock( character, 0 )
		if ret ~= LUA_TRUE then
			SystemNotice( character, "Inventory is binded. Unable to redeem" )
			return
		end
		
		local retbag = HasLeaveBagGrid( character, 1)
		if retbag ~= LUA_TRUE then
			SystemNotice(character,"Insufficent inventory space to redeem")
			return 
		end
		
		ExchangeReq( character, npc, srcID, srcNum, tarID, tarNum, timeNum )
	elseif usCmd == CMD_CM_TRADEITEM then --请求交易处理
		local tradetype = ReadByte( rpk )
		
		if (tradetype == ROLE_TRADE_SALE or tradetype ==ROLE_TRADE_BUY) and (not playerActiveNpcs[character] or playerActiveNpcs[character].Npc ~= npc or playerActiveNpcs[character].Page ~= PAGE_NPC_TRADEITEM) then
			playerActiveNpcs[character] = nil
			return
		elseif (tradetype == ROLE_TRADE_BUY_GOODS or tradetype ==ROLE_TRADE_SALE_GOODS) and (not playerActiveNpcs[character] or playerActiveNpcs[character].Npc ~= npc or playerActiveNpcs[character].Page ~= PAGE_BOAT_TRADEITEM) then
			playerActiveNpcs[character] = nil
			return
		elseif tradetype == ROLE_TRADE_SELECT_BOAT and (not playerActiveNpcs[character] or playerActiveNpcs[character].Npc ~= GetCharID( npc ) or playerActiveNpcs[character].Page ~= PAGE_BOAT_TRADE) then
			playerActiveNpcs[character] = nil
			return
		end
		
		
		if tradetype == ROLE_TRADE_SALE then	--请求出售物品
			if trade.tp ~= TRADE_NOMAL then
				SystemNotice( character, "Trade mode error!tp =", trade.tp )
				PRINT( "trade mode error!tp = , tradetype = ", trade.tp, ROLE_TRADE_SALE )
				return
			end

			local index = ReadByte( rpk )
			local count = ReadByte( rpk )
			if count == 0 then
				return
			end
			PRINT( "MsgProc:Sale index = %d, count = %d", index, count )
			Sale( character, npc, index, count )
		elseif tradetype == ROLE_TRADE_BUY then	--请求购买物品
			if trade.tp ~= TRADE_NOMAL then
				SystemNotice( character, "Trade mode error!tp =", trade.tp )
				PRINT( "trade mode error!tp = , tradetype = ", trade.tp, ROLE_TRADE_BUY )
				return
			end

			local itemtype = ReadByte( rpk )
			local index1 = ReadByte( rpk )
			local index2 = ReadByte( rpk )
			local count = ReadByte( rpk )
			if count == 0 then
				return
			end
			PRINT( "MsgProc:Buy itemtype = %d, index1 = %d, index2 = %d, count = %d", itemtype, index1, index2, count )
			Buy( character, npc, trade, itemtype, index1, index2, count )
		elseif tradetype == ROLE_TRADE_SALE_GOODS then	--请求出售货舱物品
			if trade.tp ~= TRADE_GOODS then
				SystemNotice( character, "Trade mode error!tp =", trade.tp )
				PRINT( "trade mode error!tp = , tradetype = ", trade.tp, ROLE_TRADE_SALE_GOODS )
				return
			end

			local boatid = ReadDword( rpk )
			local index = ReadByte( rpk )
			local count = ReadByte( rpk )
			if count == 0 then
				return
			end
			PRINT( "MsgProc:Sale boatid = ,index =, count =", boatid, index, count )
			SaleGoods( character, npc, trade, boatid, index, count )
		elseif tradetype == ROLE_TRADE_BUY_GOODS then 	--请求购买货舱物品
			if trade.tp ~= TRADE_GOODS then
				SystemNotice( character, "Trade mode error!tp =", trade.tp )
				PRINT( "trade mode error!tp = , tradetype = ", trade.tp, ROLE_TRADE_BUY_GOODS )
				return
			end

			local boatid = ReadDword( rpk )
			local itemtype = ReadByte( rpk )
			local index1 = ReadByte( rpk )
			local index2 = ReadByte( rpk )
			local count = ReadByte( rpk )

			if count == 0 then
				return
			end
			BuyGoods( character, npc, trade, boatid, itemtype, index1, index2, count )
		elseif tradetype == ROLE_TRADE_SELECT_BOAT then --选择交易船只
			local index = ReadByte( rpk )
			TradeGoods( character, npc, trade, index )
		else
			return SystemNotice( character, "MsgProc: trade request command error!" )
		end
	elseif usCmd == CMD_CM_MISSION then --任务处理
		return MissionProc( character, npc, rpk, missionlist )
	else
		return SystemNotice( character, "MsgProc: Unknown internet command!" )
	end
end